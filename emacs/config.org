# -*- org-structure-template-alist: (("s" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC")) -*-
#+TITLE:  Emacs Configuration
#+AUTHOR: Brian Blumberg
#+EMAIL:  blum@disroot.org
#+STARTUP: content

* Package Manager
** Package: =use-package=
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+END_SRC

** Package: =auto-compile=
#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :ensure t
    :config
    (auto-compile-on-load-mode 1)
    (auto-compile-on-save-mode 1))
#+END_SRC

* Default Information
** Personal information
#+BEGIN_SRC emacs-lisp
  (setf user-full-name "Brian Blumberg"
        user-mail-address "blum@disroot.org")
#+END_SRC

** Default browser
#+BEGIN_SRC emacs-lisp
  (setf browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "xdg-open")
#+END_SRC

* UI Modifications
** Hide {menu,tool,scroll} bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

** Disable startup screen
#+BEGIN_SRC emacs-lisp
  (setf inhibit-startup-screen 1)
#+END_SRC

** Set default theme
*** Package: =base16-theme=
#+BEGIN_SRC emacs-lisp
  (use-package base16-theme
    :ensure t
    :config
    (if (daemonp)
        (add-hook 'after-make-frame-functions
                  (lambda (frame)
                    (select-frame frame)
                    (load-theme 'base16-material 1)))
      (load-theme 'base16-material 1)))
#+END_SRC

*** Package: =telephone-line=
#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :ensure t
    :init
    (setf telephone-line-primary-left-separator 'telephone-line-abs-left)
    (setf telephone-line-secondary-left-separator 'telephone-line-abs-hollow-left)
    (setf telephone-line-secondary-right-separator 'telephone-line-abs-hollow-right)
    (setf telephone-line-primary-right-separator 'telephone-line-abs-right)
    (setf telephone-line-height 32)
    :config
    (telephone-line-mode 1))
#+END_SRC

** Set default font
#+BEGIN_SRC emacs-lisp
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (select-frame frame)
                  ;; (set-frame-font "Iosevka Light-12")))
                  (set-face-attribute 'default nil
                                      :height 120 :width
                                      'normal :weight 'light :family "Iosevka")))
    ;; (set-frame-font "Iosevka Light-12"))
    (set-face-attribute 'default nil
                        :height 120 :width
                        'normal :weight 'light :family "Iosevka"))

#+END_SRC

** Set UTF-8 encoding
#+BEGIN_SRC emacs-lisp
  (set-language-environment 'utf-8)
  (setf locale-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setf default-file-name-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (setf x-select-request-type '(UTF_STRING COMPOUND_TEXT TEXT STRING))
#+END_SRC

** Prettify symbols
#+BEGIN_SRC emacs-lisp
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (select-frame frame)
                  (when window-system (global-prettify-symbols-mode 1))))
    (when window-system (global-prettify-symbols-mode 1)))
#+END_SRC

** Highlight current line
#+BEGIN_SRC emacs-lisp
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (select-frame frame)
                  (when window-system (global-hl-line-mode 1))))
    (when window-system (global-hl-line-mode 1)))
#+END_SRC

** Scrolling
#+BEGIN_SRC emacs-lisp
  (setf scroll-conservatively 100)
#+END_SRC

* Convenience Settings
** Open and reload Emacs
#+BEGIN_SRC emacs-lisp
  (defun blum/config-open ()
    "Open Emacs configuration file."
    (interactive)
    (find-file (concat user-emacs-directory "config.org")))

  (defun blum/config-reload ()
    "Reload Emacs configuration file."
    (interactive)
    (load-file (concat user-emacs-directory "init.el")))

  (global-set-key (kbd "C-c c e") 'blum/config-open)
  (global-set-key (kbd "C-c c E") 'blum/config-reload)
#+END_SRC

** Use "y" and "n" instead of "yes" and "no"
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Disable backup files
#+BEGIN_SRC emacs-lisp
  (setf make-backup-files nil)
#+END_SRC

** Enable narrowing ability
#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+END_SRC

** Enable regional case change
#+BEGIN_SRC emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+END_SRC

** Delete selected text when yanking
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC

** Winner mode
#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC

** =<TAB>= always inserts spaces
#+BEGIN_SRC emacs-lisp
  (setf indent-tabs-mode nil)
#+END_SRC

* Org Mode
** Package: =org-mode=
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :init
    (setf org-startup-indented 1))
#+END_SRC

** Package: =org-bullets=
#+BEGIN_SRC emacs-lisp
  ;; (use-package org-bullets
  ;;   :ensure t
  ;;   :hook (org-mode . org-bullets-mode))
#+END_SRC

* Projects
** Package: =magit=
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

** Package: =projectile=
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t)
#+END_SRC

** Package: =counsel-projectile=
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :after (projectile counsel)
    :config
    (counsel-projectile-mode 1))
#+END_SRC

** Package: =org-projectile=
#+BEGIN_SRC emacs-lisp
  ;; (use-package org-projectile
  ;;   :ensure t
  ;;   :after (projectile org))
#+END_SRC

* Auto Completion
** Package: =company=
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :bind (:map company-active-map
                ("C-n" . company-select-next-if-tooltip-visible-or-complete-selection)
                ("C-p" . company-select-previous-or-abort)
                ("C-d" . company-show-doc-buffer)
                ("M-." . company-show-location))
    :init
    (setf company-idle-delay 0.2)
    (setf company-minimum-prefix-length 3)
    (setf company-show-numbers 1)
    :config
    (global-company-mode 1))
#+END_SRC

** Package: =slime-company=
#+BEGIN_SRC emacs-lisp
  (use-package slime-company
    :ensure t
    :init
    (push 'slime-company slime-contribs))
#+END_SRC

* Parentheses
** Show matching brackets
#+BEGIN_SRC emacs-lisp
  (setf show-paren-style 'parenthesis)
  (add-hook 'prog-mode-hook #'show-paren-mode)
  (add-hook 'slime-repl-mode-hook #'show-paren-mode)
  (add-hook 'geiser-repl-mode-hook #'show-paren-mode)
#+END_SRC

** Package: =rainbow-delimeters=
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook ((prog-mode slime-repl-mode geiser-repl-mode) . rainbow-delimiters-mode))
#+END_SRC

** Package: =smartparens=
#+BEGIN_SRC emacs-lisp
  (use-package smartparens-config
    :ensure smartparens
    :config
    (smartparens-global-mode 1))
#+END_SRC

* Search and Navigation
** Package: =ivy=
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :init
    (setf ivy-use-virtual-buffers 1)
    (setf ivy-count-format "(%d/%d) ")
    :config
    (ivy-mode 1))
#+END_SRC

** Package: =hydra=
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t)
#+END_SRC

** Package: =ivy-hydra=
#+BEGIN_SRC emacs-lisp
  (use-package ivy-hydra
    :ensure t
    :after (ivy hydra))
#+END_SRC

** Package: =swiper=
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :after ivy
    :bind ("C-s" . swiper))
#+END_SRC

** Package: =counsel=
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :after ivy
    :config
    (counsel-mode 1))
#+END_SRC

** Package: =avy=
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind (("C-;" . avy-goto-char)
           ("C-:" . avy-goto-char-2)))
#+END_SRC

* Common Lisp
** Package: =slime=
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :init
    (setf inferior-lisp-program "/usr/bin/sbcl")
    (push 'slime-fancy slime-contribs))
#+END_SRC

* StumpWM
** Open StumpWM configuration file
#+BEGIN_SRC emacs-lisp
  (defun blum/stumpwm-config-open ()
    (interactive)
    (find-file (concat (getenv "HOME") "/.stumpwm.d/init.lisp")))
  (global-set-key (kbd "C-c c s") 'blum/stumpwm-config-open)
#+END_SRC

* Arch Linux
** Package: =pkgbuild-mode=
#+BEGIN_SRC emacs-lisp
  (use-package pkgbuild-mode
    :ensure t
    :mode "/PKGBUILD$")
#+END_SRC

* Miscellaneous
** Package: =rainbow-mode=
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :hook ((prog-mode slime-repl-mode geiser-repl mode) . rainbow-mode))
#+END_SRC
** Package: =undo-tree=
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
    (global-undo-tree-mode 1))
#+END_SRC
** Package: =which-key=
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode 1))
#+END_SRC
** Package: =pdf-tools=
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install))
#+END_SRC

* Needed Packages
** Flycheck
** General
